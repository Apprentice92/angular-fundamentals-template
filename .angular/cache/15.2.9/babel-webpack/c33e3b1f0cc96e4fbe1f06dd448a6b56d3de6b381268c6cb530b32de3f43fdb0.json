{"ast":null,"code":"import { environment } from \"src/environments/environment\";\nimport { BehaviorSubject, catchError, tap, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./session-storage.service\";\nimport * as i3 from \"@app/user/services/user-store.service\";\nexport class AuthService {\n  constructor(http, sessionStorageService, userStorageService) {\n    this.http = http;\n    this.sessionStorageService = sessionStorageService;\n    this.userStorageService = userStorageService;\n    this.isAuthorized$$ = new BehaviorSubject(this.hasToken());\n    this.isAuthorized$ = this.isAuthorized$$.asObservable();\n  }\n  login(user) {\n    return this.http.post(environment.backend_uri + \"/login\", user).pipe(tap(response => {\n      this.sessionStorageService.setToken(response.result);\n      this.isAuthorized$$.next(true);\n    }), catchError(this.handleError));\n  }\n  logout() {\n    this.sessionStorageService.deleteToken();\n    this.isAuthorised = false;\n  }\n  register(user) {\n    return this.http.post(environment.backend_uri + \"/register\", user).pipe(catchError(this.handleError));\n  }\n  get isAuthorised() {\n    return this.isAuthorized$$.value;\n  }\n  set isAuthorised(value) {\n    this.isAuthorized$$.next(value);\n  }\n  getLoginUrl() {\n    return \"/login\";\n  }\n  hasToken() {\n    return !!this.sessionStorageService.getToken();\n  }\n  handleError(error) {\n    const errorMessage = error.error?.message || error.message || \"An unknown error occurred!\";\n    return throwError(errorMessage);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SessionStorageService), i0.ɵɵinject(i3.UserStoreService));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,WAAW,QAAQ,8BAA8B;AAC1D,SACEC,eAAe,EACfC,UAAU,EAGVC,GAAG,EACHC,UAAU,QACL,MAAM;;;;;AAQb,OAAM,MAAOC,WAAW;EAItBC,YACUC,IAAgB,EAChBC,qBAA4C,EAC5CC,kBAAoC;IAFpC,SAAI,GAAJF,IAAI;IACJ,0BAAqB,GAArBC,qBAAqB;IACrB,uBAAkB,GAAlBC,kBAAkB;IANlB,mBAAc,GAAG,IAAIR,eAAe,CAAU,IAAI,CAACS,QAAQ,EAAE,CAAC;IACjE,kBAAa,GAAG,IAAI,CAACC,cAAc,CAACC,YAAY,EAAE;EAMtD;EAEHC,KAAK,CAACC,IAAS;IACb,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAACf,WAAW,CAACgB,WAAW,GAAG,QAAQ,EAAEF,IAAI,CAAC,CAACG,IAAI,CAClEd,GAAG,CAAEe,QAAa,IAAI;MACpB,IAAI,CAACV,qBAAqB,CAACW,QAAQ,CAACD,QAAQ,CAACE,MAAM,CAAC;MACpD,IAAI,CAACT,cAAc,CAACU,IAAI,CAAC,IAAI,CAAC;IAChC,CAAC,CAAC,EACFnB,UAAU,CAAC,IAAI,CAACoB,WAAW,CAAC,CAC7B;EACH;EAEAC,MAAM;IACJ,IAAI,CAACf,qBAAqB,CAACgB,WAAW,EAAE;IACxC,IAAI,CAACC,YAAY,GAAG,KAAK;EAC3B;EAEAC,QAAQ,CAACZ,IAAU;IACjB,OAAO,IAAI,CAACP,IAAI,CACbQ,IAAI,CAACf,WAAW,CAACgB,WAAW,GAAG,WAAW,EAAEF,IAAI,CAAC,CACjDG,IAAI,CAACf,UAAU,CAAC,IAAI,CAACoB,WAAW,CAAC,CAAC;EACvC;EAEA,IAAIG,YAAY;IACd,OAAO,IAAI,CAACd,cAAc,CAACgB,KAAK;EAClC;EACA,IAAIF,YAAY,CAACE,KAAc;IAC7B,IAAI,CAAChB,cAAc,CAACU,IAAI,CAACM,KAAK,CAAC;EACjC;EACAC,WAAW;IACT,OAAO,QAAQ;EACjB;EACAlB,QAAQ;IACN,OAAO,CAAC,CAAC,IAAI,CAACF,qBAAqB,CAACqB,QAAQ,EAAE;EAChD;EACQP,WAAW,CAACQ,KAAwB;IAC1C,MAAMC,YAAY,GAChBD,KAAK,CAACA,KAAK,EAAEE,OAAO,IAAIF,KAAK,CAACE,OAAO,IAAI,4BAA4B;IACvE,OAAO5B,UAAU,CAAC2B,YAAY,CAAC;EACjC;;AA/CW1B,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA4B,SAAX5B,WAAW;EAAA6B,YAFR;AAAM","names":["environment","BehaviorSubject","catchError","tap","throwError","AuthService","constructor","http","sessionStorageService","userStorageService","hasToken","isAuthorized$$","asObservable","login","user","post","backend_uri","pipe","response","setToken","result","next","handleError","logout","deleteToken","isAuthorised","register","value","getLoginUrl","getToken","error","errorMessage","message","factory","providedIn"],"sourceRoot":"","sources":["C:\\Prog\\EPAM2\\Angular1\\angular-fundamentals-template\\src\\app\\auth\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { User } from \"../services/user-info\";\r\nimport { HttpClient, HttpErrorResponse } from \"@angular/common/http\";\r\nimport { environment } from \"src/environments/environment\";\r\nimport {\r\n  BehaviorSubject,\r\n  catchError,\r\n  map,\r\n  Observable,\r\n  tap,\r\n  throwError,\r\n} from \"rxjs\";\r\nimport { SessionStorageService } from \"./session-storage.service\";\r\nimport { UserStoreService } from \"@app/user/services/user-store.service\";\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n    private isAuthorized$$ = new BehaviorSubject<boolean>(this.hasToken());\r\n  public isAuthorized$ = this.isAuthorized$$.asObservable();\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private sessionStorageService: SessionStorageService,\r\n    private userStorageService: UserStoreService\r\n  ) {}\r\n\r\n  login(user: any): Observable<any> {\r\n    return this.http.post(environment.backend_uri + \"/login\", user).pipe(\r\n      tap((response: any) => {\r\n        this.sessionStorageService.setToken(response.result);\r\n        this.isAuthorized$$.next(true);\r\n      }),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  logout() {\r\n    this.sessionStorageService.deleteToken();\r\n    this.isAuthorised = false;\r\n  }\r\n\r\n  register(user: User): Observable<any> {\r\n    return this.http\r\n      .post(environment.backend_uri + \"/register\", user)\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  get isAuthorised() {\r\n    return this.isAuthorized$$.value;\r\n  }\r\n  set isAuthorised(value: boolean) {\r\n    this.isAuthorized$$.next(value);\r\n  }\r\n  getLoginUrl() {\r\n    return \"/login\";\r\n  }\r\n  hasToken(): boolean {\r\n    return !!this.sessionStorageService.getToken();\r\n  }\r\n  private handleError(error: HttpErrorResponse) {\r\n    const errorMessage =\r\n      error.error?.message || error.message || \"An unknown error occurred!\";\r\n    return throwError(errorMessage);\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}