{"ast":null,"code":"import { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../services/session-storage.service\";\nexport class TokenInterceptor {\n  constructor(authService, router, sessionStorageService) {\n    this.authService = authService;\n    this.router = router;\n    this.sessionStorageService = sessionStorageService;\n  }\n  intercept(req, next) {\n    console.log(\"Intercepted request is going to: \", req.url);\n    const authToken = this.sessionStorageService.getToken();\n    const authReq = req.clone({\n      headers: req.headers.set('Authorization', `Bearer ${authToken}`)\n    });\n    return next.handle(authReq).pipe(catchError(error => {\n      if (error.status === 403) {\n        this.authService.logout();\n        this.router.navigate(['/login']);\n      }\n      return throwError(error);\n    }));\n  }\n}\nTokenInterceptor.ɵfac = function TokenInterceptor_Factory(t) {\n  return new (t || TokenInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.SessionStorageService));\n};\nTokenInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TokenInterceptor,\n  factory: TokenInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,UAAU,EAAEC,UAAU,QAAQ,MAAM;;;;;AAMzD,OAAM,MAAOC,gBAAgB;EACzBC,YAAoBC,WAAwB,EAAUC,MAAc,EAAUC,qBAA4C;IAAtG,gBAAW,GAAXF,WAAW;IAAuB,WAAM,GAANC,MAAM;IAAkB,0BAAqB,GAArBC,qBAAqB;EAA0B;EAC7HC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IAChDC,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEH,GAAG,CAACI,GAAG,CAAC;IAEzD,MAAMC,SAAS,GAAG,IAAI,CAACP,qBAAqB,CAACQ,QAAQ,EAAE;IACvD,MAAMC,OAAO,GAAGP,GAAG,CAACQ,KAAK,CAAC;MACxBC,OAAO,EAAET,GAAG,CAACS,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,UAAUL,SAAS,EAAE;KAChE,CAAC;IACF,OAAOJ,IAAI,CAACU,MAAM,CAACJ,OAAO,CAAC,CAACK,IAAI,CAC9BpB,UAAU,CAAEqB,KAAwB,IAAI;MACtC,IAAIA,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;QACxB,IAAI,CAAClB,WAAW,CAACmB,MAAM,EAAE;QACzB,IAAI,CAAClB,MAAM,CAACmB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;;MAElC,OAAOvB,UAAU,CAACoB,KAAK,CAAC;IAC1B,CAAC,CAAC,CACH;EACH;;AAlBSnB,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAAuB,SAAhBvB,gBAAgB;AAAA","names":["catchError","throwError","TokenInterceptor","constructor","authService","router","sessionStorageService","intercept","req","next","console","log","url","authToken","getToken","authReq","clone","headers","set","handle","pipe","error","status","logout","navigate","factory"],"sourceRoot":"","sources":["C:\\Prog\\EPAM2\\Angular1\\angular-fundamentals-template\\src\\app\\auth\\interceptors\\token.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\r\nimport { Observable, catchError, throwError } from 'rxjs';\r\nimport { AuthService } from '../services/auth.service';\r\nimport { Router } from '@angular/router';\r\nimport { SessionStorageService } from '../services/session-storage.service';\r\n\r\n@Injectable()\r\nexport class TokenInterceptor implements HttpInterceptor {\r\n    constructor(private authService: AuthService, private router: Router, private sessionStorageService: SessionStorageService) {}\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n      console.log(\"Intercepted request is going to: \", req.url);\r\n\r\n      const authToken = this.sessionStorageService.getToken();\r\n      const authReq = req.clone({\r\n        headers: req.headers.set('Authorization', `Bearer ${authToken}`)\r\n      });\r\n      return next.handle(authReq).pipe(\r\n        catchError((error: HttpErrorResponse) => {\r\n          if (error.status === 403) {\r\n            this.authService.logout();\r\n            this.router.navigate(['/login']);\r\n          }\r\n          return throwError(error);\r\n        })\r\n      );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}