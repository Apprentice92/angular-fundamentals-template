{"ast":null,"code":"import { BehaviorSubject, tap } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./user.service\";\nexport class UserStoreService {\n  constructor(userService) {\n    this.userService = userService;\n    this.name$$ = new BehaviorSubject(\"\");\n    this.isAdmin$$ = new BehaviorSubject(false);\n    this.isDataLoaded$$ = new BehaviorSubject(false);\n    this.name$ = this.name$$.asObservable();\n    this.isAdmin$ = this.isAdmin$$.asObservable();\n    this.isDataLoaded$ = this.isDataLoaded$$.asObservable();\n  }\n  getUser() {\n    this.userService.getUser().pipe(tap(response => {\n      this.name$$.next(response.result.name);\n      this.isAdmin$$.next(response.result.role === \"admin\");\n      this.isDataLoaded$$.next(true);\n    })).subscribe();\n  }\n  get isAdmin() {\n    return this.isAdmin$$.value;\n  }\n  logout() {\n    this.name$$.next(\"\");\n    this.isAdmin$$.next(false);\n    this.isDataLoaded$$.next(false);\n  }\n}\nUserStoreService.ɵfac = function UserStoreService_Factory(t) {\n  return new (t || UserStoreService)(i0.ɵɵinject(i1.UserService));\n};\nUserStoreService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserStoreService,\n  factory: UserStoreService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,eAAe,EAAEC,GAAG,QAAQ,MAAM;;;AAM3C,OAAM,MAAOC,gBAAgB;EASzBC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;IARvB,WAAM,GAAG,IAAIJ,eAAe,CAAS,EAAE,CAAC;IACxC,cAAS,GAAG,IAAIA,eAAe,CAAU,KAAK,CAAC;IAC/C,mBAAc,GAAG,IAAIA,eAAe,CAAU,KAAK,CAAC;IAE5D,UAAK,GAAG,IAAI,CAACK,MAAM,CAACC,YAAY,EAAE;IAClC,aAAQ,GAAG,IAAI,CAACC,SAAS,CAACD,YAAY,EAAE;IACxC,kBAAa,GAAG,IAAI,CAACE,cAAc,CAACF,YAAY,EAAE;EAEH;EAE/CG,OAAO;IACL,IAAI,CAACL,WAAW,CACbK,OAAO,EAAE,CACTC,IAAI,CACHT,GAAG,CAAEU,QAAa,IAAI;MACpB,IAAI,CAACN,MAAM,CAACO,IAAI,CAACD,QAAQ,CAACE,MAAM,CAACC,IAAI,CAAC;MACtC,IAAI,CAACP,SAAS,CAACK,IAAI,CAACD,QAAQ,CAACE,MAAM,CAACE,IAAI,KAAK,OAAO,CAAC;MACrD,IAAI,CAACP,cAAc,CAACI,IAAI,CAAC,IAAI,CAAC;IAChC,CAAC,CAAC,CACH,CACAI,SAAS,EAAE;EAChB;EACA,IAAIC,OAAO;IACT,OAAO,IAAI,CAACV,SAAS,CAACW,KAAK;EAC7B;EACAC,MAAM;IACJ,IAAI,CAACd,MAAM,CAACO,IAAI,CAAC,EAAE,CAAC;IACpB,IAAI,CAACL,SAAS,CAACK,IAAI,CAAC,KAAK,CAAC;IAC1B,IAAI,CAACJ,cAAc,CAACI,IAAI,CAAC,KAAK,CAAC;EACjC;;AA9BSV,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAAkB,SAAhBlB,gBAAgB;EAAAmB,YAFb;AAAM","names":["BehaviorSubject","tap","UserStoreService","constructor","userService","name$$","asObservable","isAdmin$$","isDataLoaded$$","getUser","pipe","response","next","result","name","role","subscribe","isAdmin","value","logout","factory","providedIn"],"sourceRoot":"","sources":["C:\\Prog\\EPAM2\\Angular1\\angular-fundamentals-template\\src\\app\\user\\services\\user-store.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { BehaviorSubject, tap } from \"rxjs\";\r\nimport { UserService } from \"./user.service\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class UserStoreService {\r\n    private name$$ = new BehaviorSubject<string>(\"\");\r\n    private isAdmin$$ = new BehaviorSubject<boolean>(false);\r\n    private isDataLoaded$$ = new BehaviorSubject<boolean>(false);\r\n\r\n    name$ = this.name$$.asObservable();\r\n    isAdmin$ = this.isAdmin$$.asObservable();\r\n    isDataLoaded$ = this.isDataLoaded$$.asObservable();\r\n\r\n    constructor(private userService: UserService) {}\r\n\r\n    getUser() {\r\n      this.userService\r\n        .getUser()\r\n        .pipe(\r\n          tap((response: any) => {\r\n            this.name$$.next(response.result.name);\r\n            this.isAdmin$$.next(response.result.role === \"admin\");\r\n            this.isDataLoaded$$.next(true);\r\n          })\r\n        )\r\n        .subscribe();\r\n    }\r\n    get isAdmin() {\r\n      return this.isAdmin$$.value;\r\n    }\r\n    logout() {\r\n      this.name$$.next(\"\");\r\n      this.isAdmin$$.next(false);\r\n      this.isDataLoaded$$.next(false);\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}