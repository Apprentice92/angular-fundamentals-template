{"ast":null,"code":"import { map, filter, take } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/user-store.service\";\nimport * as i2 from \"@angular/router\";\nexport class AdminGuard {\n  constructor(userStore, router) {\n    this.userStore = userStore;\n    this.router = router;\n  }\n  canActivate() {\n    return this.userStore.isDataLoaded$.pipe(filter(isLoaded => isLoaded), take(1), map(() => {\n      if (!this.userStore.isAdmin) {\n        return this.router.createUrlTree([\"courses\"]);\n      }\n      return true;\n    }));\n  }\n}\nAdminGuard.ɵfac = function AdminGuard_Factory(t) {\n  return new (t || AdminGuard)(i0.ɵɵinject(i1.UserStoreService), i0.ɵɵinject(i2.Router));\n};\nAdminGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AdminGuard,\n  factory: AdminGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,GAAG,EAAEC,MAAM,EAAEC,IAAI,QAAQ,gBAAgB;;;;AAMlD,OAAM,MAAOC,UAAU;EACnBC,YAAoBC,SAA2B,EAAUC,MAAc;IAAnD,cAAS,GAATD,SAAS;IAA4B,WAAM,GAANC,MAAM;EAAW;EAC1EC,WAAW;IAKT,OAAO,IAAI,CAACF,SAAS,CAACG,aAAa,CAACC,IAAI,CACtCR,MAAM,CAAES,QAAQ,IAAKA,QAAQ,CAAC,EAC9BR,IAAI,CAAC,CAAC,CAAC,EACPF,GAAG,CAAC,MAAK;MACP,IAAI,CAAC,IAAI,CAACK,SAAS,CAACM,OAAO,EAAE;QAC3B,OAAO,IAAI,CAACL,MAAM,CAACM,aAAa,CAAC,CAAC,SAAS,CAAC,CAAC;;MAE/C,OAAO,IAAI;IACb,CAAC,CAAC,CACH;EACH;;AAjBST,UAAU;mBAAVA,UAAU;AAAA;AAAVA,UAAU;SAAVA,UAAU;EAAAU,SAAVV,UAAU;EAAAW,YAFP;AAAM","names":["map","filter","take","AdminGuard","constructor","userStore","router","canActivate","isDataLoaded$","pipe","isLoaded","isAdmin","createUrlTree","factory","providedIn"],"sourceRoot":"","sources":["C:\\Prog\\EPAM2\\Angular1\\angular-fundamentals-template\\src\\app\\user\\guards\\admin.guard.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { CanActivate, Router, UrlTree } from \"@angular/router\";\r\nimport { Observable } from \"rxjs\";\r\nimport { map, filter, take } from \"rxjs/operators\";\r\nimport { UserStoreService } from \"../services/user-store.service\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AdminGuard implements CanActivate {\r\n    constructor(private userStore: UserStoreService, private router: Router) {}\r\n    canActivate():\r\n      | Observable<boolean | UrlTree>\r\n      | Promise<boolean | UrlTree>\r\n      | boolean\r\n      | UrlTree {\r\n      return this.userStore.isDataLoaded$.pipe(\r\n        filter((isLoaded) => isLoaded),\r\n        take(1),\r\n        map(() => {\r\n          if (!this.userStore.isAdmin) {\r\n            return this.router.createUrlTree([\"courses\"]);\r\n          }\r\n          return true;\r\n        })\r\n      );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}