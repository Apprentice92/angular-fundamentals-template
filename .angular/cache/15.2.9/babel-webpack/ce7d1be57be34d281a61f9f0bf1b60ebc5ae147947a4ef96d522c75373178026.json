{"ast":null,"code":"import { BehaviorSubject, catchError, forkJoin, map, of, switchMap, tap, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./courses.service\";\nexport class CoursesStoreService {\n  constructor(coursesService) {\n    this.coursesService = coursesService;\n    this.isLoading$$ = new BehaviorSubject(false);\n    this.courses$$ = new BehaviorSubject([]);\n    this.authors$$ = new BehaviorSubject([]);\n    this.selectedCourse$$ = new BehaviorSubject({});\n    this.selectedAuthor$$ = new BehaviorSubject({});\n    this.isLoading$ = this.isLoading$$.asObservable();\n    this.courses$ = this.courses$$.asObservable();\n    this.selectedCourse$ = this.selectedCourse$$.asObservable();\n    this.selectedAuthor$ = this.selectedAuthor$$.asObservable();\n  }\n  fetchAuthorsForCourse(course) {\n    if (course.authors && course.authors.length > 0) {\n      return forkJoin(course.authors.map(authorId => this.coursesService.getAuthorById(authorId))).pipe(map(authors => {\n        course.authors = authors;\n        return course;\n      }));\n    }\n    return of(course);\n  }\n  handleCourses(courses) {\n    if (courses.length > 0) {\n      return forkJoin(courses.map(course => this.fetchAuthorsForCourse(course)));\n    }\n    return of([]);\n  }\n  getAll() {\n    this.isLoading$$.next(true);\n    this.coursesService.getAll().pipe(switchMap(this.handleCourses.bind(this)), tap(this.handleSuccess.bind(this)), catchError(this.handleError.bind(this))).subscribe();\n  }\n  handleSuccess(courses) {\n    this.courses$$.next(courses);\n    this.isLoading$$.next(false);\n  }\n  handleError(error) {\n    console.error(\"Error loading courses:\", error);\n    this.isLoading$$.next(false);\n    return throwError(() => new Error(\"Error loading courses: \" + error));\n  }\n  createCourse(course) {\n    this.isLoading$$.next(true);\n    this.coursesService.createCourse(course).pipe(tap(course => {\n      this.courses$$.next([...this.courses$$.value, course]);\n      this.isLoading$$.next(false);\n    }), catchError(error => {\n      this.isLoading$$.next(false);\n      throw \"Error loading course: \" + error;\n    })).subscribe();\n  }\n  getCourse(courseId) {\n    this.coursesService.getCourse(courseId).pipe(switchMap(course => {\n      if (course.authors && course.authors.length > 0) {\n        return forkJoin(course.authors.map(authorId => this.coursesService.getAuthorById(authorId))).pipe(map(authors => {\n          course.authors = authors;\n          return course;\n        }));\n      }\n      return of(course);\n    }), tap(course => this.selectedCourse$$.next(course)), catchError(error => {\n      console.error(\"Error loading course:\", error);\n      return of(null);\n    })).subscribe();\n  }\n  editCourse(id, course) {\n    this.isLoading$$.next(true);\n    this.coursesService.editCourse(id, course).pipe(tap(updatedCourse => {\n      const updatedCourses = this.courses$$.value.map(course => course.id === id ? updatedCourse : course);\n      this.courses$$.next(updatedCourses);\n      this.isLoading$$.next(false);\n    }), catchError(error => {\n      console.error(\"Error deleting course:\", error);\n      this.isLoading$$.next(false);\n      throw \"Error deleting course: \" + error;\n    })).subscribe();\n  }\n  deleteCourse(id) {\n    this.isLoading$$.next(true);\n    this.coursesService.deleteCourse(id).pipe(tap(() => {\n      const filteredCourses = this.courses$$.value.filter(course => course.id !== id);\n      this.courses$$.next(filteredCourses);\n      this.isLoading$$.next(false);\n    }), catchError(error => {\n      console.error(\"Error deleting course:\", error);\n      this.isLoading$$.next(false);\n      throw \"Error deleting course: \" + error;\n    })).subscribe();\n  }\n  filterCourses(filters) {\n    this.isLoading$$.next(true);\n    this.coursesService.filterCourses(filters).pipe(switchMap(this.handleCourses.bind(this)), tap(this.handleSuccess.bind(this)), catchError(this.handleError.bind(this))).subscribe();\n  }\n  getAllAuthors() {\n    this.isLoading$$.next(true);\n    this.coursesService.getAllAuthors().pipe(tap(authors => {\n      this.authors$$.next(authors);\n      this.isLoading$$.next(false);\n    }), catchError(error => {\n      this.isLoading$$.next(false);\n      throw \"Error loading authors: \" + error;\n    })).subscribe();\n  }\n  createAuthor(name) {\n    this.isLoading$$.next(true);\n    return this.coursesService.createAuthor(name).pipe(tap(author => {\n      this.authors$$.next([...this.authors$$.value, author]);\n      this.selectedAuthor$$.next(author);\n      this.isLoading$$.next(false);\n    }), catchError(error => {\n      this.isLoading$$.next(false);\n      throw \"Error creating author: \" + error;\n    }));\n  }\n  getAuthorById(id) {\n    this.isLoading$$.next(true);\n    this.coursesService.getAuthorById(id).pipe(tap(author => {\n      this.selectedAuthor$$.next(author);\n      this.isLoading$$.next(false);\n    }), catchError(error => {\n      this.isLoading$$.next(false);\n      throw \"Error loading author: \" + error;\n    })).subscribe();\n  }\n}\nCoursesStoreService.ɵfac = function CoursesStoreService_Factory(t) {\n  return new (t || CoursesStoreService)(i0.ɵɵinject(i1.CoursesService));\n};\nCoursesStoreService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CoursesStoreService,\n  factory: CoursesStoreService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["BehaviorSubject","catchError","forkJoin","map","of","switchMap","tap","throwError","CoursesStoreService","constructor","coursesService","isLoading$$","asObservable","courses$$","selectedCourse$$","selectedAuthor$$","fetchAuthorsForCourse","course","authors","length","authorId","getAuthorById","pipe","handleCourses","courses","getAll","next","bind","handleSuccess","handleError","subscribe","error","console","Error","createCourse","value","getCourse","courseId","editCourse","id","updatedCourse","updatedCourses","deleteCourse","filteredCourses","filter","filterCourses","filters","getAllAuthors","authors$$","createAuthor","name","author","factory","providedIn"],"sourceRoot":"","sources":["C:\\Prog\\EPAM2\\Angular1\\angular-fundamentals-template\\src\\app\\services\\courses-store.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport {\r\n  BehaviorSubject,\r\n  catchError,\r\n  filter,\r\n  forkJoin,\r\n  map,\r\n  Observable,\r\n  of,\r\n  switchMap,\r\n  tap,\r\n  throwError,\r\n} from \"rxjs\";\r\nimport { CoursesService } from \"./courses.service\";\r\nimport { Author, Course, CourseDTO } from \"../services/course-info\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class CoursesStoreService {\r\n    private isLoading$$ = new BehaviorSubject<boolean>(false);\r\n\r\n    private courses$$ = new BehaviorSubject<CourseDTO[]>([]);\r\n    private authors$$ = new BehaviorSubject<Author[]>([]);\r\n    private selectedCourse$$ = new BehaviorSubject<CourseDTO>({});\r\n    private selectedAuthor$$ = new BehaviorSubject<Author>({});\r\n\r\n    isLoading$ = this.isLoading$$.asObservable();\r\n\r\n    courses$ = this.courses$$.asObservable();\r\n    selectedCourse$ = this.selectedCourse$$.asObservable();\r\n    selectedAuthor$ = this.selectedAuthor$$.asObservable();\r\n\r\n    constructor(private coursesService: CoursesService) {}\r\n\r\n    private fetchAuthorsForCourse(course: any): Observable<any> {\r\n      if (course.authors && course.authors.length > 0) {\r\n        return forkJoin(\r\n          course.authors.map((authorId: string) =>\r\n            this.coursesService.getAuthorById(authorId)\r\n          )\r\n        ).pipe(\r\n          map((authors: any) => {\r\n            course.authors = authors;\r\n            return course;\r\n          })\r\n        );\r\n      }\r\n      return of(course);\r\n    }\r\n\r\n    private handleCourses(courses: any[]): Observable<any[]> {\r\n      if (courses.length > 0) {\r\n        return forkJoin(\r\n          courses.map((course) => this.fetchAuthorsForCourse(course))\r\n        );\r\n      }\r\n      return of([]);\r\n    }\r\n\r\n    getAll() {\r\n      this.isLoading$$.next(true);\r\n      this.coursesService\r\n        .getAll()\r\n        .pipe(\r\n          switchMap(this.handleCourses.bind(this)),\r\n          tap(this.handleSuccess.bind(this)),\r\n          catchError(this.handleError.bind(this))\r\n        )\r\n        .subscribe();\r\n    }\r\n\r\n    private handleSuccess(courses: any) {\r\n      this.courses$$.next(courses);\r\n      this.isLoading$$.next(false);\r\n    }\r\n    private handleError(error: any) {\r\n      console.error(\"Error loading courses:\", error);\r\n      this.isLoading$$.next(false);\r\n      return throwError(() => new Error(\"Error loading courses: \" + error));\r\n    }\r\n    createCourse(course: Course) {\r\n      this.isLoading$$.next(true);\r\n      this.coursesService\r\n        .createCourse(course)\r\n        .pipe(\r\n          tap((course) => {\r\n            this.courses$$.next([...this.courses$$.value, course]);\r\n            this.isLoading$$.next(false);\r\n          }),\r\n          catchError((error) => {\r\n            this.isLoading$$.next(false);\r\n            throw \"Error loading course: \" + error;\r\n          })\r\n        )\r\n        .subscribe();\r\n    }\r\n    getCourse(courseId: string) {\r\n      this.coursesService\r\n        .getCourse(courseId)\r\n        .pipe(\r\n          switchMap((course) => {\r\n            if (course.authors && course.authors.length > 0) {\r\n              return forkJoin(\r\n                course.authors.map((authorId: string) =>\r\n                  this.coursesService.getAuthorById(authorId)\r\n                )\r\n              ).pipe(\r\n                map((authors: any) => {\r\n                  course.authors = authors;\r\n                  return course;\r\n                })\r\n              );\r\n            }\r\n            return of(course);\r\n          }),\r\n          tap((course) => this.selectedCourse$$.next(course)),\r\n          catchError((error) => {\r\n            console.error(\"Error loading course:\", error);\r\n            return of(null);\r\n          })\r\n        )\r\n        .subscribe();\r\n    }\r\n    editCourse(id: string, course: Course): void {\r\n      this.isLoading$$.next(true);\r\n      this.coursesService\r\n        .editCourse(id, course)\r\n        .pipe(\r\n          tap((updatedCourse) => {\r\n            const updatedCourses = this.courses$$.value.map((course) =>\r\n              course.id === id ? updatedCourse : course\r\n            );\r\n            this.courses$$.next(updatedCourses);\r\n            this.isLoading$$.next(false);\r\n          }),\r\n          catchError((error) => {\r\n            console.error(\"Error deleting course:\", error);\r\n            this.isLoading$$.next(false);\r\n            throw \"Error deleting course: \" + error;\r\n          })\r\n        )\r\n        .subscribe();\r\n    }\r\n    deleteCourse(id: string): void {\r\n      this.isLoading$$.next(true);\r\n      this.coursesService\r\n        .deleteCourse(id)\r\n        .pipe(\r\n          tap(() => {\r\n            const filteredCourses = this.courses$$.value.filter(\r\n              (course) => course.id !== id\r\n            );\r\n            this.courses$$.next(filteredCourses);\r\n            this.isLoading$$.next(false);\r\n          }),\r\n          catchError((error) => {\r\n            console.error(\"Error deleting course:\", error);\r\n            this.isLoading$$.next(false);\r\n            throw \"Error deleting course: \" + error;\r\n          })\r\n        )\r\n        .subscribe();\r\n    }\r\n    filterCourses(filters: {\r\n      title?: string;\r\n      description?: string;\r\n      duration?: number;\r\n      creationDate?: string;\r\n    }) {\r\n      this.isLoading$$.next(true);\r\n      this.coursesService\r\n        .filterCourses(filters)\r\n        .pipe(\r\n          switchMap(this.handleCourses.bind(this)),\r\n          tap(this.handleSuccess.bind(this)),\r\n          catchError(this.handleError.bind(this))\r\n        )\r\n        .subscribe();\r\n    }\r\n    getAllAuthors() {\r\n      this.isLoading$$.next(true);\r\n      this.coursesService\r\n        .getAllAuthors()\r\n        .pipe(\r\n          tap((authors) => {\r\n            this.authors$$.next(authors);\r\n            this.isLoading$$.next(false);\r\n          }),\r\n          catchError((error) => {\r\n            this.isLoading$$.next(false);\r\n            throw \"Error loading authors: \" + error;\r\n          })\r\n        )\r\n        .subscribe();\r\n    }\r\n    createAuthor(name: string) {\r\n      this.isLoading$$.next(true);\r\n      return this.coursesService.createAuthor(name).pipe(\r\n        tap((author) => {\r\n          this.authors$$.next([...this.authors$$.value, author]);\r\n          this.selectedAuthor$$.next(author);\r\n          this.isLoading$$.next(false);\r\n        }),\r\n        catchError((error) => {\r\n          this.isLoading$$.next(false);\r\n          throw \"Error creating author: \" + error;\r\n        })\r\n      );\r\n    }\r\n    getAuthorById(id: string) {\r\n      this.isLoading$$.next(true);\r\n      this.coursesService\r\n        .getAuthorById(id)\r\n        .pipe(\r\n          tap((author) => {\r\n            this.selectedAuthor$$.next(author);\r\n            this.isLoading$$.next(false);\r\n          }),\r\n          catchError((error) => {\r\n            this.isLoading$$.next(false);\r\n            throw \"Error loading author: \" + error;\r\n          })\r\n        )\r\n        .subscribe();\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}