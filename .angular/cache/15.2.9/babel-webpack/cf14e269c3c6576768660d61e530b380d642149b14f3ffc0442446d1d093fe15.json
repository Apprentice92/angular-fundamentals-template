{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../services/auth.service\";\nexport class NotAuthorizedGuard {\n  constructor(router, authService) {\n    this.router = router;\n    this.authService = authService;\n  }\n  canActivate(route, state) {\n    if (!this.authService.isAuthorised) {\n      return true;\n    } else {\n      return this.router.createUrlTree(['courses']);\n    }\n  }\n}\nNotAuthorizedGuard.ɵfac = function NotAuthorizedGuard_Factory(t) {\n  return new (t || NotAuthorizedGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AuthService));\n};\nNotAuthorizedGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: NotAuthorizedGuard,\n  factory: NotAuthorizedGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,kBAAkB;EAC3BC,YAAoBC,MAAc,EAAUC,WAAwB;IAAhD,WAAM,GAAND,MAAM;IAAkB,gBAAW,GAAXC,WAAW;EAAe;EACtEC,WAAW,CAACC,KAA6B,EAAEC,KAA0B;IACjE,IAAG,CAAC,IAAI,CAACH,WAAW,CAACI,YAAY,EAAC;MAC9B,OAAO,IAAI;KACd,MAAM;MACH,OAAO,IAAI,CAACL,MAAM,CAACM,aAAa,CAAC,CAAC,SAAS,CAAC,CAAC;;EAErD;;AARSR,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;SAAlBA,kBAAkB;EAAAS,SAAlBT,kBAAkB;EAAAU,YAFf;AAAM","names":["NotAuthorizedGuard","constructor","router","authService","canActivate","route","state","isAuthorised","createUrlTree","factory","providedIn"],"sourceRoot":"","sources":["C:\\Prog\\EPAM2\\Angular1\\angular-fundamentals-template\\src\\app\\auth\\guards\\not-authorized.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class NotAuthorizedGuard implements CanActivate {\r\n    constructor(private router: Router, private authService: AuthService){}\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n        if(!this.authService.isAuthorised){\r\n            return true;\r\n        } else {\r\n            return this.router.createUrlTree(['courses']);\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}