{"ast":null,"code":"import { HttpParams } from \"@angular/common/http\";\nimport { catchError, map } from \"rxjs\";\nimport { environment } from \"src/environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CoursesService {\n  constructor(http) {\n    this.http = http;\n  }\n  getAll() {\n    return this.http.get(environment.backend_uri + \"/courses/all\").pipe(map(response => {\n      return response.result;\n    }), catchError(error => {\n      throw \"Error in getting courses: \" + error.message;\n    }));\n  }\n  createCourse(course) {\n    return this.http.post(environment.backend_uri + \"/courses/add\", course).pipe(catchError(error => {\n      throw \"Error in creating course: \" + error.message;\n    }));\n  }\n  editCourse(id, course) {\n    return this.http.put(environment.backend_uri + \"/courses/\" + id, course).pipe(catchError(error => {\n      throw \"Error in editting course: \" + error.message;\n    }));\n  }\n  getCourse(id) {\n    return this.http.get(environment.backend_uri + \"/courses/\" + id).pipe(map(response => {\n      return response.result;\n    }), catchError(error => {\n      throw \"Error in getting course: \" + error.message;\n    }));\n  }\n  deleteCourse(id) {\n    return this.http.delete(environment.backend_uri + \"/courses/\" + id).pipe(catchError(error => {\n      throw \"Error in deleting course: \" + error.message;\n    }));\n  }\n  filterCourses(filters) {\n    let params = new HttpParams();\n    if (filters.title) {\n      params = params.append(\"title\", filters.title);\n    }\n    if (filters.description) {\n      params = params.append(\"description\", filters.description);\n    }\n    if (filters.duration) {\n      params = params.append(\"duration\", filters.duration.toString());\n    }\n    if (filters.creationDate) {\n      params = params.append(\"creationDate\", filters.creationDate);\n    }\n    return this.http.get(environment.backend_uri + \"/courses/filter\", {\n      params\n    }).pipe(map(response => {\n      if (response.successful) {\n        return response.result;\n      }\n    }), catchError(error => {\n      throw \"Error in filtering: \" + error.message;\n    }));\n  }\n  getAllAuthors() {\n    return this.http.get(environment.backend_uri + \"/authors/all\").pipe(map(response => {\n      return response.result;\n    }), catchError(error => {\n      throw \"Error in getting authors: \" + error.message;\n    }));\n  }\n  createAuthor(name) {\n    return this.http.post(environment.backend_uri + \"/authors/add\", {\n      name: name\n    }).pipe(map(response => {\n      return response.result;\n    }), catchError(error => {\n      throw \"Error in creating author: \" + error.message;\n    }));\n  }\n  getAuthorById(id) {\n    return this.http.get(environment.backend_uri + \"/authors/\" + id).pipe(map(response => {\n      return response.result;\n    }), catchError(error => {\n      throw \"Error in getting author: \" + error.message;\n    }));\n  }\n}\nCoursesService.ɵfac = function CoursesService_Factory(t) {\n  return new (t || CoursesService)(i0.ɵɵinject(i1.HttpClient));\n};\nCoursesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CoursesService,\n  factory: CoursesService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpParams","catchError","map","environment","CoursesService","constructor","http","getAll","get","backend_uri","pipe","response","result","error","message","createCourse","course","post","editCourse","id","put","getCourse","deleteCourse","delete","filterCourses","filters","params","title","append","description","duration","toString","creationDate","successful","getAllAuthors","createAuthor","name","getAuthorById","factory","providedIn"],"sourceRoot":"","sources":["C:\\Prog\\EPAM2\\Angular1\\angular-fundamentals-template\\src\\app\\services\\courses.service.ts"],"sourcesContent":["import { HttpClient, HttpParams } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { catchError, map, Observable, throwError } from \"rxjs\";\r\nimport { environment } from \"src/environments/environment\";\r\nimport { Author, Course, CourseDTO } from \"../services/course-info\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class CoursesService {\r\n    constructor(private http: HttpClient) {}\r\n\r\n    getAll() {\r\n      return this.http.get(environment.backend_uri + \"/courses/all\").pipe(\r\n        map((response: any) => {\r\n          return response.result;\r\n        }),\r\n        catchError((error) => {\r\n          throw \"Error in getting courses: \" + error.message;\r\n        })\r\n      );\r\n    }\r\n\r\n    createCourse(course: Course) {\r\n      return this.http\r\n        .post(environment.backend_uri + \"/courses/add\", course)\r\n        .pipe(\r\n          catchError((error) => {\r\n            throw \"Error in creating course: \" + error.message;\r\n          })\r\n        );\r\n    }\r\n\r\n    editCourse(id: string, course: Course) {\r\n      return this.http\r\n        .put(environment.backend_uri + \"/courses/\" + id, course)\r\n        .pipe(\r\n          catchError((error) => {\r\n            throw \"Error in editting course: \" + error.message;\r\n          })\r\n        );\r\n    }\r\n  \r\n    getCourse(id: string) {\r\n      return this.http.get(environment.backend_uri + \"/courses/\" + id).pipe(\r\n        map((response: any) => {\r\n          return response.result;\r\n        }),\r\n        catchError((error) => {\r\n          throw \"Error in getting course: \" + error.message;\r\n        })\r\n      );\r\n    }\r\n  \r\n    deleteCourse(id: string) {\r\n      return this.http.delete(environment.backend_uri + \"/courses/\" + id).pipe(\r\n        catchError((error) => {\r\n          throw \"Error in deleting course: \" + error.message;\r\n        })\r\n      );\r\n    }\r\n\r\n    filterCourses(filters: {\r\n      title?: string;\r\n      description?: string;\r\n      duration?: number;\r\n      creationDate?: string;\r\n    }): Observable<Course[]> {\r\n      let params = new HttpParams();\r\n      if (filters.title) {\r\n        params = params.append(\"title\", filters.title);\r\n      }\r\n      if (filters.description) {\r\n        params = params.append(\"description\", filters.description);\r\n      }\r\n      if (filters.duration) {\r\n        params = params.append(\"duration\", filters.duration.toString());\r\n      }\r\n      if (filters.creationDate) {\r\n        params = params.append(\"creationDate\", filters.creationDate);\r\n      }\r\n      return this.http\r\n        .get(environment.backend_uri + \"/courses/filter\", { params })\r\n        .pipe(\r\n          map((response: any) => {\r\n            if (response.successful) {\r\n              return response.result;\r\n            }\r\n          }),\r\n          catchError((error) => {\r\n            throw \"Error in filtering: \" + error.message;\r\n          })\r\n        );\r\n    }\r\n    getAllAuthors() {\r\n      return this.http.get(environment.backend_uri + \"/authors/all\").pipe(\r\n        map((response: any) => {\r\n          return response.result;\r\n        }),\r\n        catchError((error) => {\r\n          throw \"Error in getting authors: \" + error.message;\r\n        })\r\n      );\r\n    }\r\n    createAuthor(name: string): Observable<Author> {\r\n      return this.http\r\n        .post(environment.backend_uri + \"/authors/add\", { name: name })\r\n        .pipe(\r\n          map((response: any) => {\r\n            return response.result;\r\n          }),\r\n          catchError((error) => {\r\n            throw \"Error in creating author: \" + error.message;\r\n          })\r\n        );\r\n    }\r\n    getAuthorById(id: string): Observable<Author> {\r\n      return this.http.get(environment.backend_uri + \"/authors/\" + id).pipe(\r\n        map((response: any) => {\r\n          return response.result;\r\n        }),\r\n        catchError((error) => {\r\n          throw \"Error in getting author: \" + error.message;\r\n        })\r\n      );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}